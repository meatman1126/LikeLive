
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, k as create_slot, l as assign, m as compute_rest_props, v as validate_slots, o as exclude_internal_props, e as element, p as set_attributes, c as add_location, f as insert_dev, u as update_slot_base, q as get_all_dirty_from_scope, r as get_slot_changes, w as get_spread_update, x as transition_in, y as transition_out, j as detach_dev, z as setContext, A as group_outros, B as check_outros, C as create_component, D as mount_component, E as destroy_component, F as listen_dev, G as run_all, H as bubble, I as binding_callbacks, a as space, b as attr_dev, g as append_dev, t as text, n as noop, J as set_style } from './index-4f0b884b.js';
import { i as isObject, g as getColumnSizeClass, c as classnames, B as Button } from './Button-cc8642f6.js';

/* node_modules/sveltestrap/src/Col.svelte generated by Svelte v3.59.2 */
const file$8 = "node_modules/sveltestrap/src/Col.svelte";

function create_fragment$8(ctx) {
	let div;
	let div_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	let div_levels = [
		/*$$restProps*/ ctx[1],
		{
			class: div_class_value = /*colClasses*/ ctx[0].join(' ')
		}
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			add_location(div, file$8, 63, 0, 1536);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1],
				{ class: div_class_value }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$8.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$8($$self, $$props, $$invalidate) {
	const omit_props_names = ["class","xs","sm","md","lg","xl","xxl"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Col', slots, ['default']);
	let { class: className = '' } = $$props;
	let { xs = undefined } = $$props;
	let { sm = undefined } = $$props;
	let { md = undefined } = $$props;
	let { lg = undefined } = $$props;
	let { xl = undefined } = $$props;
	let { xxl = undefined } = $$props;
	const colClasses = [];
	const lookup = { xs, sm, md, lg, xl, xxl };

	Object.keys(lookup).forEach(colWidth => {
		const columnProp = lookup[colWidth];

		if (!columnProp && columnProp !== '') {
			return; //no value for this width
		}

		const isXs = colWidth === 'xs';

		if (isObject(columnProp)) {
			const colSizeInterfix = isXs ? '-' : `-${colWidth}-`;
			const colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);

			if (columnProp.size || columnProp.size === '') {
				colClasses.push(colClass);
			}

			if (columnProp.push) {
				colClasses.push(`push${colSizeInterfix}${columnProp.push}`);
			}

			if (columnProp.pull) {
				colClasses.push(`pull${colSizeInterfix}${columnProp.pull}`);
			}

			if (columnProp.offset) {
				colClasses.push(`offset${colSizeInterfix}${columnProp.offset}`);
			}

			if (columnProp.order) {
				colClasses.push(`order${colSizeInterfix}${columnProp.order}`);
			}
		} else {
			colClasses.push(getColumnSizeClass(isXs, colWidth, columnProp));
		}
	});

	if (!colClasses.length) {
		colClasses.push('col');
	}

	if (className) {
		colClasses.push(className);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
		if ('xs' in $$new_props) $$invalidate(3, xs = $$new_props.xs);
		if ('sm' in $$new_props) $$invalidate(4, sm = $$new_props.sm);
		if ('md' in $$new_props) $$invalidate(5, md = $$new_props.md);
		if ('lg' in $$new_props) $$invalidate(6, lg = $$new_props.lg);
		if ('xl' in $$new_props) $$invalidate(7, xl = $$new_props.xl);
		if ('xxl' in $$new_props) $$invalidate(8, xxl = $$new_props.xxl);
		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		getColumnSizeClass,
		isObject,
		className,
		xs,
		sm,
		md,
		lg,
		xl,
		xxl,
		colClasses,
		lookup
	});

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
		if ('xs' in $$props) $$invalidate(3, xs = $$new_props.xs);
		if ('sm' in $$props) $$invalidate(4, sm = $$new_props.sm);
		if ('md' in $$props) $$invalidate(5, md = $$new_props.md);
		if ('lg' in $$props) $$invalidate(6, lg = $$new_props.lg);
		if ('xl' in $$props) $$invalidate(7, xl = $$new_props.xl);
		if ('xxl' in $$props) $$invalidate(8, xxl = $$new_props.xxl);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [colClasses, $$restProps, className, xs, sm, md, lg, xl, xxl, $$scope, slots];
}

class Col extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
			class: 2,
			xs: 3,
			sm: 4,
			md: 5,
			lg: 6,
			xl: 7,
			xxl: 8
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Col",
			options,
			id: create_fragment$8.name
		});
	}

	get class() {
		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get xs() {
		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xs(value) {
		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get sm() {
		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sm(value) {
		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get md() {
		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set md(value) {
		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get lg() {
		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set lg(value) {
		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get xl() {
		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xl(value) {
		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get xxl() {
		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xxl(value) {
		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/Container.svelte generated by Svelte v3.59.2 */
const file$7 = "node_modules/sveltestrap/src/Container.svelte";

function create_fragment$7(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
	let div_levels = [/*$$restProps*/ ctx[1], { class: /*classes*/ ctx[0] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			add_location(div, file$7, 23, 0, 542);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1],
				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$7.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$7($$self, $$props, $$invalidate) {
	let classes;
	const omit_props_names = ["class","sm","md","lg","xl","xxl","fluid"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Container', slots, ['default']);
	let { class: className = '' } = $$props;
	let { sm = undefined } = $$props;
	let { md = undefined } = $$props;
	let { lg = undefined } = $$props;
	let { xl = undefined } = $$props;
	let { xxl = undefined } = $$props;
	let { fluid = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
		if ('sm' in $$new_props) $$invalidate(3, sm = $$new_props.sm);
		if ('md' in $$new_props) $$invalidate(4, md = $$new_props.md);
		if ('lg' in $$new_props) $$invalidate(5, lg = $$new_props.lg);
		if ('xl' in $$new_props) $$invalidate(6, xl = $$new_props.xl);
		if ('xxl' in $$new_props) $$invalidate(7, xxl = $$new_props.xxl);
		if ('fluid' in $$new_props) $$invalidate(8, fluid = $$new_props.fluid);
		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		classnames,
		className,
		sm,
		md,
		lg,
		xl,
		xxl,
		fluid,
		classes
	});

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
		if ('sm' in $$props) $$invalidate(3, sm = $$new_props.sm);
		if ('md' in $$props) $$invalidate(4, md = $$new_props.md);
		if ('lg' in $$props) $$invalidate(5, lg = $$new_props.lg);
		if ('xl' in $$props) $$invalidate(6, xl = $$new_props.xl);
		if ('xxl' in $$props) $$invalidate(7, xxl = $$new_props.xxl);
		if ('fluid' in $$props) $$invalidate(8, fluid = $$new_props.fluid);
		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className, sm, md, lg, xl, xxl, fluid*/ 508) {
			$$invalidate(0, classes = classnames(className, {
				'container-sm': sm,
				'container-md': md,
				'container-lg': lg,
				'container-xl': xl,
				'container-xxl': xxl,
				'container-fluid': fluid,
				container: !sm && !md && !lg && !xl && !xxl && !fluid
			}));
		}
	};

	return [classes, $$restProps, className, sm, md, lg, xl, xxl, fluid, $$scope, slots];
}

class Container extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
			class: 2,
			sm: 3,
			md: 4,
			lg: 5,
			xl: 6,
			xxl: 7,
			fluid: 8
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Container",
			options,
			id: create_fragment$7.name
		});
	}

	get class() {
		throw new Error("<Container>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Container>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get sm() {
		throw new Error("<Container>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sm(value) {
		throw new Error("<Container>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get md() {
		throw new Error("<Container>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set md(value) {
		throw new Error("<Container>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get lg() {
		throw new Error("<Container>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set lg(value) {
		throw new Error("<Container>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get xl() {
		throw new Error("<Container>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xl(value) {
		throw new Error("<Container>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get xxl() {
		throw new Error("<Container>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xxl(value) {
		throw new Error("<Container>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get fluid() {
		throw new Error("<Container>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set fluid(value) {
		throw new Error("<Container>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/Nav.svelte generated by Svelte v3.59.2 */
const file$6 = "node_modules/sveltestrap/src/Nav.svelte";

function create_fragment$6(ctx) {
	let ul;
	let current;
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);
	let ul_levels = [/*$$restProps*/ ctx[1], { class: /*classes*/ ctx[0] }];
	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	const block = {
		c: function create() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			set_attributes(ul, ul_data);
			add_location(ul, file$6, 41, 0, 1007);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
						null
					);
				}
			}

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [
				dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1],
				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function getVerticalClass(vertical) {
	if (vertical === false) {
		return false;
	} else if (vertical === true || vertical === 'xs') {
		return 'flex-column';
	}

	return `flex-${vertical}-column`;
}

function instance$6($$self, $$props, $$invalidate) {
	let classes;

	const omit_props_names = [
		"class","tabs","pills","vertical","horizontal","justified","fill","navbar","card","underline"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Nav', slots, ['default']);
	let { class: className = '' } = $$props;
	let { tabs = false } = $$props;
	let { pills = false } = $$props;
	let { vertical = false } = $$props;
	let { horizontal = '' } = $$props;
	let { justified = false } = $$props;
	let { fill = false } = $$props;
	let { navbar = false } = $$props;
	let { card = false } = $$props;
	let { underline = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
		if ('tabs' in $$new_props) $$invalidate(3, tabs = $$new_props.tabs);
		if ('pills' in $$new_props) $$invalidate(4, pills = $$new_props.pills);
		if ('vertical' in $$new_props) $$invalidate(5, vertical = $$new_props.vertical);
		if ('horizontal' in $$new_props) $$invalidate(6, horizontal = $$new_props.horizontal);
		if ('justified' in $$new_props) $$invalidate(7, justified = $$new_props.justified);
		if ('fill' in $$new_props) $$invalidate(8, fill = $$new_props.fill);
		if ('navbar' in $$new_props) $$invalidate(9, navbar = $$new_props.navbar);
		if ('card' in $$new_props) $$invalidate(10, card = $$new_props.card);
		if ('underline' in $$new_props) $$invalidate(11, underline = $$new_props.underline);
		if ('$$scope' in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		classnames,
		className,
		tabs,
		pills,
		vertical,
		horizontal,
		justified,
		fill,
		navbar,
		card,
		underline,
		getVerticalClass,
		classes
	});

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
		if ('tabs' in $$props) $$invalidate(3, tabs = $$new_props.tabs);
		if ('pills' in $$props) $$invalidate(4, pills = $$new_props.pills);
		if ('vertical' in $$props) $$invalidate(5, vertical = $$new_props.vertical);
		if ('horizontal' in $$props) $$invalidate(6, horizontal = $$new_props.horizontal);
		if ('justified' in $$props) $$invalidate(7, justified = $$new_props.justified);
		if ('fill' in $$props) $$invalidate(8, fill = $$new_props.fill);
		if ('navbar' in $$props) $$invalidate(9, navbar = $$new_props.navbar);
		if ('card' in $$props) $$invalidate(10, card = $$new_props.card);
		if ('underline' in $$props) $$invalidate(11, underline = $$new_props.underline);
		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className, navbar, horizontal, vertical, tabs, card, pills, justified, fill, underline*/ 4092) {
			$$invalidate(0, classes = classnames(className, navbar ? 'navbar-nav' : 'nav', horizontal ? `justify-content-${horizontal}` : false, getVerticalClass(vertical), {
				'nav-tabs': tabs,
				'card-header-tabs': card && tabs,
				'nav-pills': pills,
				'card-header-pills': card && pills,
				'nav-justified': justified,
				'nav-fill': fill,
				'nav-underline': underline
			}));
		}
	};

	return [
		classes,
		$$restProps,
		className,
		tabs,
		pills,
		vertical,
		horizontal,
		justified,
		fill,
		navbar,
		card,
		underline,
		$$scope,
		slots
	];
}

class Nav extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
			class: 2,
			tabs: 3,
			pills: 4,
			vertical: 5,
			horizontal: 6,
			justified: 7,
			fill: 8,
			navbar: 9,
			card: 10,
			underline: 11
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Nav",
			options,
			id: create_fragment$6.name
		});
	}

	get class() {
		throw new Error("<Nav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Nav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tabs() {
		throw new Error("<Nav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tabs(value) {
		throw new Error("<Nav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get pills() {
		throw new Error("<Nav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pills(value) {
		throw new Error("<Nav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get vertical() {
		throw new Error("<Nav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set vertical(value) {
		throw new Error("<Nav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get horizontal() {
		throw new Error("<Nav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set horizontal(value) {
		throw new Error("<Nav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get justified() {
		throw new Error("<Nav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set justified(value) {
		throw new Error("<Nav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get fill() {
		throw new Error("<Nav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set fill(value) {
		throw new Error("<Nav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get navbar() {
		throw new Error("<Nav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set navbar(value) {
		throw new Error("<Nav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get card() {
		throw new Error("<Nav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set card(value) {
		throw new Error("<Nav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get underline() {
		throw new Error("<Nav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set underline(value) {
		throw new Error("<Nav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/Navbar.svelte generated by Svelte v3.59.2 */
const file$5 = "node_modules/sveltestrap/src/Navbar.svelte";

// (44:2) {:else}
function create_else_block(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(44:2) {:else}",
		ctx
	});

	return block;
}

// (40:2) {#if container}
function create_if_block(ctx) {
	let container_1;
	let current;

	container_1 = new Container({
			props: {
				fluid: /*container*/ ctx[0] === 'fluid',
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(container_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(container_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const container_1_changes = {};
			if (dirty & /*container*/ 1) container_1_changes.fluid = /*container*/ ctx[0] === 'fluid';

			if (dirty & /*$$scope*/ 4096) {
				container_1_changes.$$scope = { dirty, ctx };
			}

			container_1.$set(container_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(container_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(container_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(container_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(40:2) {#if container}",
		ctx
	});

	return block;
}

// (41:4) <Container fluid={container === 'fluid'}>
function create_default_slot$1(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(41:4) <Container fluid={container === 'fluid'}>",
		ctx
	});

	return block;
}

function create_fragment$5(ctx) {
	let nav;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*container*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	let nav_levels = [
		/*$$restProps*/ ctx[3],
		{ class: /*classes*/ ctx[1] },
		{ "data-bs-theme": /*theme*/ ctx[2] }
	];

	let nav_data = {};

	for (let i = 0; i < nav_levels.length; i += 1) {
		nav_data = assign(nav_data, nav_levels[i]);
	}

	const block = {
		c: function create() {
			nav = element("nav");
			if_block.c();
			set_attributes(nav, nav_data);
			add_location(nav, file$5, 38, 0, 896);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, nav, anchor);
			if_blocks[current_block_type_index].m(nav, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(nav, null);
			}

			set_attributes(nav, nav_data = get_spread_update(nav_levels, [
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3],
				(!current || dirty & /*classes*/ 2) && { class: /*classes*/ ctx[1] },
				(!current || dirty & /*theme*/ 4) && { "data-bs-theme": /*theme*/ ctx[2] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(nav);
			if_blocks[current_block_type_index].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function getExpandClass(expand) {
	if (expand === false) {
		return false;
	} else if (expand === true || expand === 'xs') {
		return 'navbar-expand';
	}

	return `navbar-expand-${expand}`;
}

function instance$5($$self, $$props, $$invalidate) {
	let theme;
	let classes;
	const omit_props_names = ["class","container","color","dark","expand","fixed","light","sticky"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Navbar', slots, ['default']);
	setContext('navbar', { inNavbar: true });
	let { class: className = '' } = $$props;
	let { container = 'fluid' } = $$props;
	let { color = '' } = $$props;
	let { dark = false } = $$props;
	let { expand = '' } = $$props;
	let { fixed = '' } = $$props;
	let { light = false } = $$props;
	let { sticky = '' } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(4, className = $$new_props.class);
		if ('container' in $$new_props) $$invalidate(0, container = $$new_props.container);
		if ('color' in $$new_props) $$invalidate(5, color = $$new_props.color);
		if ('dark' in $$new_props) $$invalidate(6, dark = $$new_props.dark);
		if ('expand' in $$new_props) $$invalidate(7, expand = $$new_props.expand);
		if ('fixed' in $$new_props) $$invalidate(8, fixed = $$new_props.fixed);
		if ('light' in $$new_props) $$invalidate(9, light = $$new_props.light);
		if ('sticky' in $$new_props) $$invalidate(10, sticky = $$new_props.sticky);
		if ('$$scope' in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		classnames,
		Container,
		setContext,
		className,
		container,
		color,
		dark,
		expand,
		fixed,
		light,
		sticky,
		getExpandClass,
		classes,
		theme
	});

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(4, className = $$new_props.className);
		if ('container' in $$props) $$invalidate(0, container = $$new_props.container);
		if ('color' in $$props) $$invalidate(5, color = $$new_props.color);
		if ('dark' in $$props) $$invalidate(6, dark = $$new_props.dark);
		if ('expand' in $$props) $$invalidate(7, expand = $$new_props.expand);
		if ('fixed' in $$props) $$invalidate(8, fixed = $$new_props.fixed);
		if ('light' in $$props) $$invalidate(9, light = $$new_props.light);
		if ('sticky' in $$props) $$invalidate(10, sticky = $$new_props.sticky);
		if ('classes' in $$props) $$invalidate(1, classes = $$new_props.classes);
		if ('theme' in $$props) $$invalidate(2, theme = $$new_props.theme);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*dark, light*/ 576) {
			$$invalidate(2, theme = dark ? 'dark' : light ? 'light' : undefined);
		}

		if ($$self.$$.dirty & /*className, expand, color, fixed, sticky*/ 1456) {
			$$invalidate(1, classes = classnames(className, 'navbar', getExpandClass(expand), {
				[`bg-${color}`]: color,
				[`fixed-${fixed}`]: fixed,
				[`sticky-${sticky}`]: sticky
			}));
		}
	};

	return [
		container,
		classes,
		theme,
		$$restProps,
		className,
		color,
		dark,
		expand,
		fixed,
		light,
		sticky,
		slots,
		$$scope
	];
}

class Navbar extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
			class: 4,
			container: 0,
			color: 5,
			dark: 6,
			expand: 7,
			fixed: 8,
			light: 9,
			sticky: 10
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Navbar",
			options,
			id: create_fragment$5.name
		});
	}

	get class() {
		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get container() {
		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set container(value) {
		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get dark() {
		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dark(value) {
		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get expand() {
		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set expand(value) {
		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get fixed() {
		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set fixed(value) {
		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get light() {
		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set light(value) {
		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get sticky() {
		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sticky(value) {
		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/NavItem.svelte generated by Svelte v3.59.2 */
const file$4 = "node_modules/sveltestrap/src/NavItem.svelte";

function create_fragment$4(ctx) {
	let li;
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let li_levels = [/*$$restProps*/ ctx[1], { class: /*classes*/ ctx[0] }];
	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	const block = {
		c: function create() {
			li = element("li");
			if (default_slot) default_slot.c();
			set_attributes(li, li_data);
			add_location(li, file$4, 10, 0, 219);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);

			if (default_slot) {
				default_slot.m(li, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [
				dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1],
				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let classes;
	const omit_props_names = ["class","active"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('NavItem', slots, ['default']);
	let { class: className = '' } = $$props;
	let { active = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
		if ('active' in $$new_props) $$invalidate(3, active = $$new_props.active);
		if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({ classnames, className, active, classes });

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
		if ('active' in $$props) $$invalidate(3, active = $$new_props.active);
		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className, active*/ 12) {
			$$invalidate(0, classes = classnames(className, 'nav-item', active ? 'active' : false));
		}
	};

	return [classes, $$restProps, className, active, $$scope, slots];
}

class NavItem extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, { class: 2, active: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "NavItem",
			options,
			id: create_fragment$4.name
		});
	}

	get class() {
		throw new Error("<NavItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<NavItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get active() {
		throw new Error("<NavItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set active(value) {
		throw new Error("<NavItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/NavLink.svelte generated by Svelte v3.59.2 */
const file$3 = "node_modules/sveltestrap/src/NavLink.svelte";

function create_fragment$3(ctx) {
	let a;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	let a_levels = [
		/*$$restProps*/ ctx[3],
		{ href: /*href*/ ctx[0] },
		{ class: /*classes*/ ctx[1] }
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const block = {
		c: function create() {
			a = element("a");
			if (default_slot) default_slot.c();
			set_attributes(a, a_data);
			add_location(a, file$3, 27, 0, 472);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);

			if (default_slot) {
				default_slot.m(a, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(a, "click", /*click_handler*/ ctx[9], false, false, false, false),
					listen_dev(a, "click", /*handleClick*/ ctx[2], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3],
				(!current || dirty & /*href*/ 1) && { href: /*href*/ ctx[0] },
				(!current || dirty & /*classes*/ 2) && { class: /*classes*/ ctx[1] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let classes;
	const omit_props_names = ["class","disabled","active","href"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('NavLink', slots, ['default']);
	let { class: className = '' } = $$props;
	let { disabled = false } = $$props;
	let { active = false } = $$props;
	let { href = '#' } = $$props;

	function handleClick(e) {
		if (disabled) {
			e.preventDefault();
			e.stopImmediatePropagation();
			return;
		}

		if (href === '#') {
			e.preventDefault();
		}
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(4, className = $$new_props.class);
		if ('disabled' in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
		if ('active' in $$new_props) $$invalidate(6, active = $$new_props.active);
		if ('href' in $$new_props) $$invalidate(0, href = $$new_props.href);
		if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		classnames,
		className,
		disabled,
		active,
		href,
		handleClick,
		classes
	});

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(4, className = $$new_props.className);
		if ('disabled' in $$props) $$invalidate(5, disabled = $$new_props.disabled);
		if ('active' in $$props) $$invalidate(6, active = $$new_props.active);
		if ('href' in $$props) $$invalidate(0, href = $$new_props.href);
		if ('classes' in $$props) $$invalidate(1, classes = $$new_props.classes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className, disabled, active*/ 112) {
			$$invalidate(1, classes = classnames(className, 'nav-link', { disabled, active }));
		}
	};

	return [
		href,
		classes,
		handleClick,
		$$restProps,
		className,
		disabled,
		active,
		$$scope,
		slots,
		click_handler
	];
}

class NavLink extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			class: 4,
			disabled: 5,
			active: 6,
			href: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "NavLink",
			options,
			id: create_fragment$3.name
		});
	}

	get class() {
		throw new Error("<NavLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<NavLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<NavLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<NavLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get active() {
		throw new Error("<NavLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set active(value) {
		throw new Error("<NavLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get href() {
		throw new Error("<NavLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<NavLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/NavbarBrand.svelte generated by Svelte v3.59.2 */
const file$2 = "node_modules/sveltestrap/src/NavbarBrand.svelte";

function create_fragment$2(ctx) {
	let a;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	let a_levels = [
		/*$$restProps*/ ctx[2],
		{ class: /*classes*/ ctx[1] },
		{ href: /*href*/ ctx[0] }
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const block = {
		c: function create() {
			a = element("a");
			if (default_slot) default_slot.c();
			set_attributes(a, a_data);
			add_location(a, file$2, 10, 0, 192);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);

			if (default_slot) {
				default_slot.m(a, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen_dev(a, "click", /*click_handler*/ ctx[6], false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2],
				(!current || dirty & /*classes*/ 2) && { class: /*classes*/ ctx[1] },
				(!current || dirty & /*href*/ 1) && { href: /*href*/ ctx[0] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let classes;
	const omit_props_names = ["class","href"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('NavbarBrand', slots, ['default']);
	let { class: className = '' } = $$props;
	let { href = '/' } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
		if ('href' in $$new_props) $$invalidate(0, href = $$new_props.href);
		if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({ classnames, className, href, classes });

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
		if ('href' in $$props) $$invalidate(0, href = $$new_props.href);
		if ('classes' in $$props) $$invalidate(1, classes = $$new_props.classes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 8) {
			$$invalidate(1, classes = classnames(className, 'navbar-brand'));
		}
	};

	return [href, classes, $$restProps, className, $$scope, slots, click_handler];
}

class NavbarBrand extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { class: 3, href: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "NavbarBrand",
			options,
			id: create_fragment$2.name
		});
	}

	get class() {
		throw new Error("<NavbarBrand>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<NavbarBrand>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get href() {
		throw new Error("<NavbarBrand>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<NavbarBrand>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/Row.svelte generated by Svelte v3.59.2 */
const file$1 = "node_modules/sveltestrap/src/Row.svelte";

function create_fragment$1(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	let div_levels = [/*$$restProps*/ ctx[2], { class: /*classes*/ ctx[1] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			add_location(div, file$1, 40, 0, 1012);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[9](div);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2],
				(!current || dirty & /*classes*/ 2) && { class: /*classes*/ ctx[1] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[9](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function getCols(cols) {
	const colsValue = parseInt(cols);

	if (!isNaN(colsValue)) {
		if (colsValue > 0) {
			return [`row-cols-${colsValue}`];
		}
	} else if (typeof cols === 'object') {
		return ['xs', 'sm', 'md', 'lg', 'xl'].map(colWidth => {
			const isXs = colWidth === 'xs';
			const colSizeInterfix = isXs ? '-' : `-${colWidth}-`;
			const value = cols[colWidth];

			if (typeof value === 'number' && value > 0) {
				return `row-cols${colSizeInterfix}${value}`;
			}

			return null;
		}).filter(value => !!value);
	}

	return [];
}

function instance$1($$self, $$props, $$invalidate) {
	let classes;
	const omit_props_names = ["class","noGutters","form","cols","inner"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Row', slots, ['default']);
	let { class: className = '' } = $$props;
	let { noGutters = false } = $$props;
	let { form = false } = $$props;
	let { cols = 0 } = $$props;
	let { inner = undefined } = $$props;

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(0, inner);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
		if ('noGutters' in $$new_props) $$invalidate(4, noGutters = $$new_props.noGutters);
		if ('form' in $$new_props) $$invalidate(5, form = $$new_props.form);
		if ('cols' in $$new_props) $$invalidate(6, cols = $$new_props.cols);
		if ('inner' in $$new_props) $$invalidate(0, inner = $$new_props.inner);
		if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		classnames,
		className,
		noGutters,
		form,
		cols,
		inner,
		getCols,
		classes
	});

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
		if ('noGutters' in $$props) $$invalidate(4, noGutters = $$new_props.noGutters);
		if ('form' in $$props) $$invalidate(5, form = $$new_props.form);
		if ('cols' in $$props) $$invalidate(6, cols = $$new_props.cols);
		if ('inner' in $$props) $$invalidate(0, inner = $$new_props.inner);
		if ('classes' in $$props) $$invalidate(1, classes = $$new_props.classes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className, noGutters, form, cols*/ 120) {
			$$invalidate(1, classes = classnames(className, noGutters ? 'gx-0' : null, form ? 'form-row' : 'row', ...getCols(cols)));
		}
	};

	return [
		inner,
		classes,
		$$restProps,
		className,
		noGutters,
		form,
		cols,
		$$scope,
		slots,
		div_binding
	];
}

class Row extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			class: 3,
			noGutters: 4,
			form: 5,
			cols: 6,
			inner: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Row",
			options,
			id: create_fragment$1.name
		});
	}

	get class() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get noGutters() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set noGutters(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get form() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set form(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get cols() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cols(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get inner() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set inner(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/Top.svelte generated by Svelte v3.59.2 */

const file = "src/Top.svelte";

// (21:8) <NavbarBrand href="#">
function create_default_slot_17(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("NicheSNS");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(21:8) <NavbarBrand href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (24:16) <NavLink href="#">
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("ホーム");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(24:16) <NavLink href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (23:12) <NavItem>
function create_default_slot_15(ctx) {
	let navlink;
	let current;

	navlink = new NavLink({
			props: {
				href: "#",
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navlink.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(navlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navlink_changes = {};

			if (dirty & /*$$scope*/ 1) {
				navlink_changes.$$scope = { dirty, ctx };
			}

			navlink.$set(navlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(23:12) <NavItem>",
		ctx
	});

	return block;
}

// (27:16) <NavLink href="#">
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("ブログ");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(27:16) <NavLink href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (26:12) <NavItem>
function create_default_slot_13(ctx) {
	let navlink;
	let current;

	navlink = new NavLink({
			props: {
				href: "#",
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navlink.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(navlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navlink_changes = {};

			if (dirty & /*$$scope*/ 1) {
				navlink_changes.$$scope = { dirty, ctx };
			}

			navlink.$set(navlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(26:12) <NavItem>",
		ctx
	});

	return block;
}

// (30:16) <NavLink href="#">
function create_default_slot_12(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("ファイルシェア");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(30:16) <NavLink href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (29:12) <NavItem>
function create_default_slot_11(ctx) {
	let navlink;
	let current;

	navlink = new NavLink({
			props: {
				href: "#",
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navlink.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(navlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navlink_changes = {};

			if (dirty & /*$$scope*/ 1) {
				navlink_changes.$$scope = { dirty, ctx };
			}

			navlink.$set(navlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(29:12) <NavItem>",
		ctx
	});

	return block;
}

// (33:16) <NavLink href="#">
function create_default_slot_10(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("More");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(33:16) <NavLink href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (32:12) <NavItem>
function create_default_slot_9(ctx) {
	let navlink;
	let current;

	navlink = new NavLink({
			props: {
				href: "#",
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navlink.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(navlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navlink_changes = {};

			if (dirty & /*$$scope*/ 1) {
				navlink_changes.$$scope = { dirty, ctx };
			}

			navlink.$set(navlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(32:12) <NavItem>",
		ctx
	});

	return block;
}

// (36:16) <NavLink href={`/oauth2/authorization/${clientId}`}                     >
function create_default_slot_8(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("サインイン");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(36:16) <NavLink href={`/oauth2/authorization/${clientId}`}                     >",
		ctx
	});

	return block;
}

// (35:12) <NavItem style="background-color: darkcyan;">
function create_default_slot_7(ctx) {
	let navlink;
	let current;

	navlink = new NavLink({
			props: {
				href: `/oauth2/authorization/${clientId}`,
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navlink.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(navlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navlink_changes = {};

			if (dirty & /*$$scope*/ 1) {
				navlink_changes.$$scope = { dirty, ctx };
			}

			navlink.$set(navlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(35:12) <NavItem style=\\\"background-color: darkcyan;\\\">",
		ctx
	});

	return block;
}

// (22:8) <Nav class="ml-auto" navbar>
function create_default_slot_6(ctx) {
	let navitem0;
	let t0;
	let navitem1;
	let t1;
	let navitem2;
	let t2;
	let navitem3;
	let t3;
	let navitem4;
	let current;

	navitem0 = new NavItem({
			props: {
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	navitem1 = new NavItem({
			props: {
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	navitem2 = new NavItem({
			props: {
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	navitem3 = new NavItem({
			props: {
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	navitem4 = new NavItem({
			props: {
				style: "background-color: darkcyan;",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navitem0.$$.fragment);
			t0 = space();
			create_component(navitem1.$$.fragment);
			t1 = space();
			create_component(navitem2.$$.fragment);
			t2 = space();
			create_component(navitem3.$$.fragment);
			t3 = space();
			create_component(navitem4.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(navitem0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(navitem1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(navitem2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(navitem3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(navitem4, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navitem0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				navitem0_changes.$$scope = { dirty, ctx };
			}

			navitem0.$set(navitem0_changes);
			const navitem1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				navitem1_changes.$$scope = { dirty, ctx };
			}

			navitem1.$set(navitem1_changes);
			const navitem2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				navitem2_changes.$$scope = { dirty, ctx };
			}

			navitem2.$set(navitem2_changes);
			const navitem3_changes = {};

			if (dirty & /*$$scope*/ 1) {
				navitem3_changes.$$scope = { dirty, ctx };
			}

			navitem3.$set(navitem3_changes);
			const navitem4_changes = {};

			if (dirty & /*$$scope*/ 1) {
				navitem4_changes.$$scope = { dirty, ctx };
			}

			navitem4.$set(navitem4_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navitem0.$$.fragment, local);
			transition_in(navitem1.$$.fragment, local);
			transition_in(navitem2.$$.fragment, local);
			transition_in(navitem3.$$.fragment, local);
			transition_in(navitem4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navitem0.$$.fragment, local);
			transition_out(navitem1.$$.fragment, local);
			transition_out(navitem2.$$.fragment, local);
			transition_out(navitem3.$$.fragment, local);
			transition_out(navitem4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navitem0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(navitem1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(navitem2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(navitem3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(navitem4, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(22:8) <Nav class=\\\"ml-auto\\\" navbar>",
		ctx
	});

	return block;
}

// (17:4) <Navbar         expand="md"         style="position: absolute; width: 97%; top: 5px; left: 50%; transform: translateX(-50%); background-color: rgba(255, 255, 255, 0.5); backdrop-filter: blur(5px);"     >
function create_default_slot_5(ctx) {
	let navbarbrand;
	let t;
	let nav;
	let current;

	navbarbrand = new NavbarBrand({
			props: {
				href: "#",
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	nav = new Nav({
			props: {
				class: "ml-auto",
				navbar: true,
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navbarbrand.$$.fragment);
			t = space();
			create_component(nav.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(navbarbrand, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(nav, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navbarbrand_changes = {};

			if (dirty & /*$$scope*/ 1) {
				navbarbrand_changes.$$scope = { dirty, ctx };
			}

			navbarbrand.$set(navbarbrand_changes);
			const nav_changes = {};

			if (dirty & /*$$scope*/ 1) {
				nav_changes.$$scope = { dirty, ctx };
			}

			nav.$set(nav_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navbarbrand.$$.fragment, local);
			transition_in(nav.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navbarbrand.$$.fragment, local);
			transition_out(nav.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navbarbrand, detaching);
			if (detaching) detach_dev(t);
			destroy_component(nav, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(17:4) <Navbar         expand=\\\"md\\\"         style=\\\"position: absolute; width: 97%; top: 5px; left: 50%; transform: translateX(-50%); background-color: rgba(255, 255, 255, 0.5); backdrop-filter: blur(5px);\\\"     >",
		ctx
	});

	return block;
}

// (48:20) <Button color="primary">
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("もっと読む");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(48:20) <Button color=\\\"primary\\\">",
		ctx
	});

	return block;
}

// (45:16) <Col>
function create_default_slot_3(ctx) {
	let h1;
	let t1;
	let p;
	let t3;
	let button;
	let current;

	button = new Button({
			props: {
				color: "primary",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			h1 = element("h1");
			h1.textContent = "NicheSNS";
			t1 = space();
			p = element("p");
			p.textContent = "「自分が好きなものを語る」SNS";
			t3 = space();
			create_component(button.$$.fragment);
			set_style(h1, "font-size", "80px");
			add_location(h1, file, 45, 20, 1275);
			attr_dev(p, "class", "h2 svelte-kvfj8");
			add_location(p, file, 46, 20, 1338);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, p, anchor);
			insert_dev(target, t3, anchor);
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p);
			if (detaching) detach_dev(t3);
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(45:16) <Col>",
		ctx
	});

	return block;
}

// (44:12) <Row>
function create_default_slot_2(ctx) {
	let col;
	let current;

	col = new Col({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(col.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(col, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const col_changes = {};

			if (dirty & /*$$scope*/ 1) {
				col_changes.$$scope = { dirty, ctx };
			}

			col.$set(col_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(col.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(col.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(col, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(44:12) <Row>",
		ctx
	});

	return block;
}

// (43:8) <Container>
function create_default_slot_1(ctx) {
	let row;
	let current;

	row = new Row({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(row.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(row, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const row_changes = {};

			if (dirty & /*$$scope*/ 1) {
				row_changes.$$scope = { dirty, ctx };
			}

			row.$set(row_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(row.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(row.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(row, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(43:8) <Container>",
		ctx
	});

	return block;
}

// (55:4) <Container>
function create_default_slot(ctx) {
	let div;
	let h1;
	let t1;
	let p;
	let t3;
	let a;
	let t4;

	const block = {
		c: function create() {
			div = element("div");
			h1 = element("h1");
			h1.textContent = "今すぐ参加する";
			t1 = space();
			p = element("p");
			p.textContent = "好きなものについて発信しましょう";
			t3 = space();
			a = element("a");
			t4 = text("Googleアカウントで利用を開始する");
			attr_dev(h1, "class", "svelte-kvfj8");
			add_location(h1, file, 56, 12, 1607);
			attr_dev(p, "class", "h3");
			add_location(p, file, 57, 12, 1636);
			attr_dev(a, "href", `/oauth2/authorization/${clientId}`);
			attr_dev(a, "class", "btn btn-success btn-block");
			add_location(a, file, 58, 12, 1683);
			attr_dev(div, "class", "invitation svelte-kvfj8");
			add_location(div, file, 55, 8, 1570);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h1);
			append_dev(div, t1);
			append_dev(div, p);
			append_dev(div, t3);
			append_dev(div, a);
			append_dev(a, t4);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(55:4) <Container>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div1;
	let navbar;
	let t0;
	let div0;
	let container0;
	let t1;
	let div2;
	let container1;
	let current;

	navbar = new Navbar({
			props: {
				expand: "md",
				style: "position: absolute; width: 97%; top: 5px; left: 50%; transform: translateX(-50%); background-color: rgba(255, 255, 255, 0.5); backdrop-filter: blur(5px);",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	container0 = new Container({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	container1 = new Container({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			create_component(navbar.$$.fragment);
			t0 = space();
			div0 = element("div");
			create_component(container0.$$.fragment);
			t1 = space();
			div2 = element("div");
			create_component(container1.$$.fragment);
			attr_dev(div0, "class", "top-content svelte-kvfj8");
			add_location(div0, file, 41, 4, 1169);
			attr_dev(div1, "class", "top-area svelte-kvfj8");
			add_location(div1, file, 15, 0, 235);
			attr_dev(div2, "class", "invitation-wrapper svelte-kvfj8");
			add_location(div2, file, 53, 0, 1513);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			mount_component(navbar, div1, null);
			append_dev(div1, t0);
			append_dev(div1, div0);
			mount_component(container0, div0, null);
			insert_dev(target, t1, anchor);
			insert_dev(target, div2, anchor);
			mount_component(container1, div2, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const navbar_changes = {};

			if (dirty & /*$$scope*/ 1) {
				navbar_changes.$$scope = { dirty, ctx };
			}

			navbar.$set(navbar_changes);
			const container0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				container0_changes.$$scope = { dirty, ctx };
			}

			container0.$set(container0_changes);
			const container1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				container1_changes.$$scope = { dirty, ctx };
			}

			container1.$set(container1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navbar.$$.fragment, local);
			transition_in(container0.$$.fragment, local);
			transition_in(container1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navbar.$$.fragment, local);
			transition_out(container0.$$.fragment, local);
			transition_out(container1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(navbar);
			destroy_component(container0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div2);
			destroy_component(container1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const clientId = "google";

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Top', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Top> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		Button,
		Col,
		Container,
		Nav,
		NavItem,
		NavLink,
		Navbar,
		NavbarBrand,
		Row,
		clientId
	});

	return [];
}

class Top extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Top",
			options,
			id: create_fragment.name
		});
	}
}

const app = new Top({
	target: document.body,
});

export { app as default };
//# sourceMappingURL=top.js.map
